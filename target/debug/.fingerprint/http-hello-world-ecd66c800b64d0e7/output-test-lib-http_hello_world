{"$message_type":"diagnostic","message":"visibility qualifiers are not permitted here","code":{"code":"E0449","explanation":"A visibility qualifier was used where one is not permitted. Visibility\nqualifiers are not permitted on enum variants, trait items, impl blocks, and\nextern blocks, as they already share the visibility of the parent item.\n\nErroneous code examples:\n\n```compile_fail,E0449\nstruct Bar;\n\ntrait Foo {\n    fn foo();\n}\n\nenum Baz {\n    pub Qux, // error: visibility qualifiers are not permitted here\n}\n\npub impl Bar {} // error: visibility qualifiers are not permitted here\n\npub impl Foo for Bar { // error: visibility qualifiers are not permitted here\n    pub fn foo() {} // error: visibility qualifiers are not permitted here\n}\n```\n\nTo fix this error, simply remove the visibility qualifier. Example:\n\n```\nstruct Bar;\n\ntrait Foo {\n    fn foo();\n}\n\nenum Baz {\n    // Enum variants share the visibility of the enum they are in, so\n    // `pub` is not allowed here\n    Qux,\n}\n\n// Directly implemented methods share the visibility of the type itself,\n// so `pub` is not allowed here\nimpl Bar {}\n\n// Trait methods share the visibility of the trait, so `pub` is not\n// allowed in either case\nimpl Foo for Bar {\n    fn foo() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1436,"byte_end":1439,"line_start":64,"line_end":64,"column_start":4,"column_end":7,"is_primary":true,"text":[{"text":"   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {","highlight_start":4,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait items always share the visibility of their trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the qualifier","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1436,"byte_end":1439,"line_start":64,"line_end":64,"column_start":4,"column_end":7,"is_primary":true,"text":[{"text":"   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {","highlight_start":4,"highlight_end":7}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0449]\u001b[0m\u001b[0m\u001b[1m: visibility qualifiers are not permitted here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:64:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the qualifier\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: trait items always share the visibility of their trait\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1405,"byte_end":3760,"line_start":63,"line_end":111,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"impl Guest for HttpServer {","highlight_start":1,"highlight_end":28},{"text":"   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {","highlight_start":1,"highlight_end":118},{"text":"        let path_name = request.path_with_query().unwrap();","highlight_start":1,"highlight_end":60},{"text":"        let path_parts: Vec<&str> = path_name.split('/').collect();","highlight_start":1,"highlight_end":68},{"text":"        let app = TodoApp::new();","highlight_start":1,"highlight_end":34},{"text":"        match (request.method(), path_parts.as_slice()) {","highlight_start":1,"highlight_end":58},{"text":"            (Method::Get, [_, \"todos\", ..]) => {","highlight_start":1,"highlight_end":49},{"text":"                let tasks = handle_get_tasks();","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let response = OutgoingResponse::new(Fields::new());","highlight_start":1,"highlight_end":69},{"text":"                response.set_status_code(200).unwrap();","highlight_start":1,"highlight_end":56},{"text":"                let response_body = response.body().unwrap();","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let serialized_tasks = serde_json::to_vec(&tasks).unwrap();","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // let tasks = handle_get_tasks();","highlight_start":1,"highlight_end":51},{"text":"                response_body.write().unwrap().blocking_write_and_flush(&serialized_tasks).unwrap();","highlight_start":1,"highlight_end":101},{"text":"                OutgoingBody::finish(response_body, None).expect(\"failed to finish response body\");","highlight_start":1,"highlight_end":100},{"text":"                ResponseOutparam::set(response_out, Ok(response));","highlight_start":1,"highlight_end":67},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            (Method::Post, [_, \"todos\", ..]) => {","highlight_start":1,"highlight_end":50},{"text":"                let param = request.consume().unwrap();","highlight_start":1,"highlight_end":56},{"text":"                wasi::logging::logging::log(","highlight_start":1,"highlight_end":45},{"text":"                    wasi::logging::logging::Level::Info,","highlight_start":1,"highlight_end":57},{"text":"                    \"\",","highlight_start":1,"highlight_end":24},{"text":"                    &format!(\"sgdtht {:?}\", param)","highlight_start":1,"highlight_end":51},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"                add_tasks(Uuid::new_v4().to_string(), \"cbngnnsns\".to_string());","highlight_start":1,"highlight_end":80},{"text":"                let tasks = handle_get_tasks();","highlight_start":1,"highlight_end":48},{"text":"                let response = OutgoingResponse::new(Fields::new());","highlight_start":1,"highlight_end":69},{"text":"                response.set_status_code(200).unwrap();","highlight_start":1,"highlight_end":56},{"text":"                let response_body = response.body().unwrap();","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let serialized_tasks = serde_json::to_vec(&tasks).unwrap();","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // let tasks = handle_get_tasks();","highlight_start":1,"highlight_end":51},{"text":"                response_body.write().unwrap().blocking_write_and_flush(&serialized_tasks).unwrap();","highlight_start":1,"highlight_end":101},{"text":"                OutgoingBody::finish(response_body, None).expect(\"failed to finish response body\");","highlight_start":1,"highlight_end":100},{"text":"                ResponseOutparam::set(response_out, Ok(response));","highlight_start":1,"highlight_end":67},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                let response = OutgoingResponse::new(Fields::new());","highlight_start":1,"highlight_end":69},{"text":"                response.set_status_code(404).unwrap(); // Example: Not Found","highlight_start":1,"highlight_end":78},{"text":"                ResponseOutparam::set(response_out, Ok(response));","highlight_start":1,"highlight_end":67},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1392,"byte_end":1404,"line_start":62,"line_end":62,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"#[no_mangle]","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:62:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m#[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Guest for HttpServer {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let path_name = request.path_with_query().unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let path_parts: Vec<&str> = path_name.split('/').collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mnot a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `wasmcloud_actor_http_server`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1471,"byte_end":1498,"line_start":64,"line_end":64,"column_start":39,"column_end":66,"is_primary":true,"text":[{"text":"   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {","highlight_start":39,"highlight_end":66}],"label":"use of undeclared crate or module `wasmcloud_actor_http_server`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `wasmcloud_actor_http_server`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:64:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m   pub extern \"C\" fn handle(request: &wasmcloud_actor_http_server::IncomingRequest, response_out: ResponseOutparam) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `wasmcloud_actor_http_server`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0433, E0449.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0433, E0449.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0433`.\u001b[0m\n"}
